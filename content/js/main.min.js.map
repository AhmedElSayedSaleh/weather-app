{"version":3,"sources":["jquery.libraries.call.js","main.js"],"names":["$","document","ready","_$$owlCarousel2","owlCarousel","_defineProperty","_$$owlCarousel","loop","nav","dots","0","items","600","1000","addEventListener","temp","querySelector","minTemp","maxTemp","allTemp","cityName","showCity","cityData","lat","lon","address","_getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","response","data","wrap","_context2","prev","next","url","concat","fetch","method","headers","Content-Type","Access-Control-Allow-Origin","sent","json","abrupt","t0","console","log","stop","apply","this","arguments","displayWeather","_ref","_callee","e","_context","keyCode","city","value","getCityLocation","innerHTML","_x","getData","then","currently","daily","hourly","temperature","summary","icon","hourlyData","dailyData","Math","round","src","createTempDiv","time","dataLen","weatherContainer","createElement","timeEl","classList","add","length","Date","getHours","toLocaleTimeString","hour","minute","hour12","toLocaleDateString","weekday","iconEl","tempDiv","tempEl","tempDeg","appendChild","tempBtn","forEach","push","refresh","min","max","day","temperatureLow","querySelectorAll","btn","temps","remove","firstElementChild","month","year"],"mappings":"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","file":"main.min.js","sourcesContent":["// ################# forecasts times & dates scroll ###################\n\n$(document).ready(function () {\n  $(\"#hourly\").owlCarousel({\n    loop: true,\n    nav: false,\n    dots: true,\n    loop: false,\n    responsive: {\n      0: {\n        items: 2,\n      },\n      600: {\n        items: 6,\n      },\n      1000: {\n        items: 9,\n      },\n    },\n  });\n\n  $(\"#daily\").owlCarousel({\n    loop: true,\n    nav: false,\n    dots: true,\n    loop: false,\n    responsive: {\n      0: {\n        items: 1,\n      },\n      600: {\n        items: 5,\n      },\n      1000: {\n        items: 8,\n      },\n    },\n  });\n});\n","document.addEventListener(\"DOMContentLoaded\", () => {\n  const temp = document.querySelector(\"#temp\");\n  const minTemp = document.querySelector(\"#min-temp\");\n  const maxTemp = document.querySelector(\"#max-temp\");\n\n  const allTemp = [];\n\n  const cityName = document.querySelector(\"#cityName\");\n  const showCity = document.querySelector(\"#showCity\");\n  let cityData = {\n    lat: \"30.007414\",\n    lon: \"31.491318\",\n    address: \"new cairo, cairo, egypt\",\n  };\n\n  // Get weather from api\n  async function getData() {\n    const url = `https://api.darksky.net/forecast/a177f8481c31fa96c3f95ad4f4f84610/${cityData.lat},${cityData.lon}`;\n    try {\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n        },\n      });\n      const data = await response.json();\n\n      return data;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  displayWeather();\n\n  // get city location\n  cityName.addEventListener(\"keyup\", async (e) => {\n    if (e.keyCode === 13) {\n      const city = cityName.value;\n      const data = await getCityLocation(city);\n\n      cityData.lat = data.lat;\n      cityData.lon = data.lon;\n      cityData.address = data.address;\n\n      displayWeather();\n\n      showCity.innerHTML = cityData.address;\n      cityName.value = \"\";\n    }\n  });\n\n  // get current date\n  const getDate = () => {\n    const date = new Date().toLocaleDateString(\"en-US\", {\n      weekday: \"long\",\n      month: \"short\",\n      day: \"numeric\",\n      year: \"numeric\",\n    });\n    return date;\n  };\n  // display date in html\n  const setDate = () => {\n    const date = document.querySelector(\"#date\");\n    date.innerHTML = getDate();\n  };\n  setDate();\n\n  // display weather in html\n  function displayWeather() {\n    getData().then((data) => {\n      const { currently, daily, hourly } = data;\n      const { temperature, summary, icon } = currently;\n      const { data: hourlyData } = hourly;\n      const { data: dailyData } = daily;\n\n      // display current weather temperature\n\n      temp.innerHTML = `${Math.round(temperature)}`;\n\n      // display min temperature\n      const getMinTemp = () => {\n        minTemp.innerHTML = `${Math.round(Math.min(...allTemp))}`;\n      };\n\n      // display max temperature\n      const getMaxTemp = () => {\n        maxTemp.innerHTML = `${Math.round(Math.max(...allTemp))}`;\n      };\n\n      // display current weather icon\n      const iconImg = document.querySelector(\"#icon\");\n      iconImg.src = `https://darksky.net/images/weather-icons/${icon}.png`;\n\n      // display current weather summary\n      const summaryEl = document.querySelector(\"#summary\");\n      summaryEl.innerHTML = summary;\n\n      const hourlySummary = document.querySelector(\"#hourly-summary\");\n      hourlySummary.innerHTML = hourly.summary;\n\n      // create html temp div\n      const createTempDiv = (time, icon, temperature, dataLen) => {\n        const weatherContainer = document.createElement(\"div\");\n        weatherContainer.classList.add(\n          \"item\",\n          \"d-flex\",\n          \"flex-column\",\n          \"align-items-center\"\n        );\n\n        // create weather time\n        const timeEl = document.createElement(\"p\");\n        timeEl.classList.add(\"weather__forecasts__time\");\n\n        if (dataLen.length > 8) {\n          if (new Date(time * 1000).getHours() === new Date().getHours()) {\n            timeEl.innerHTML = \"Now\";\n          } else {\n            timeEl.innerHTML = new Date(time * 1000).toLocaleTimeString(\n              \"en-US\",\n              {\n                hour: \"numeric\",\n                minute: \"numeric\",\n                hour12: false,\n              }\n            );\n          }\n        } else {\n          timeEl.innerHTML = new Date(time * 1000).toLocaleDateString(\"en-US\", {\n            weekday: \"short\",\n          });\n        }\n\n        // create weather icon\n        const iconEl = document.createElement(\"img\");\n        iconEl.classList.add(\"weather__forecasts__img\");\n        iconEl.src = `https://darksky.net/images/weather-icons/${icon}.png`;\n\n        // create weather temp\n        const tempDiv = document.createElement(\"div\");\n        tempDiv.classList.add(\"weather__forecasts__temperature\");\n\n        const tempEl = document.createElement(\"span\");\n        tempEl.classList.add(\"weather__forecasts__temperature__value\");\n        tempEl.innerHTML = `${Math.round(temperature)}`;\n\n        const tempDeg = document.createElement(\"span\");\n        tempDeg.classList.add(\"temperature-degree\");\n        tempDeg.innerHTML = \"&#176;\";\n\n        tempDiv.appendChild(tempEl);\n        tempDiv.appendChild(tempDeg);\n\n        weatherContainer.appendChild(timeEl);\n        weatherContainer.appendChild(iconEl);\n        weatherContainer.appendChild(tempDiv);\n\n        return weatherContainer;\n      };\n\n      // display hourly weather\n      hourlyData.forEach((hour) => {\n        const weatherContainer = createTempDiv(\n          hour.time,\n          hour.icon,\n          hour.temperature,\n          hourlyData\n        );\n        allTemp.push(hour.temperature);\n\n        // append hourly weather to html by owl carousel\n        $(\"#hourly\").owlCarousel();\n        $(\"#hourly\").data(\"owl.carousel\").add([weatherContainer, 0]);\n        $(\"#hourly\").data(\"owl.carousel\").refresh();\n      });\n\n      // min & max temperature calling methods\n      getMinTemp();\n      getMaxTemp();\n\n      // display daily weather\n      dailyData.forEach((day) => {\n        const weatherContainer = createTempDiv(\n          day.time,\n          day.icon,\n          day.temperatureLow,\n          dailyData\n        );\n\n        // append daily weather to html by owl carousel\n        $(\"#daily\").owlCarousel();\n        $(\"#daily\").data(\"owl.carousel\").add([weatherContainer, 0]);\n        $(\"#daily\").data(\"owl.carousel\").refresh();\n      });\n\n      // Celsius/Fahrenheit buttons toggle\n      const toggleTemp = () => {\n        const tempBtn = document.querySelectorAll(\".temperature-btn\");\n\n        tempBtn.forEach((btn) => {\n          btn.addEventListener(\"click\", () => {\n            const temps = document.querySelectorAll(\n              \".weather__forecasts__temperature__value\"\n            );\n\n            tempBtn.forEach((btn) => {\n              btn.classList.remove(\"temperature-btn--right-active\");\n              btn.classList.remove(\"temperature-btn--left-active\");\n            });\n            if (btn.firstElementChild.innerHTML === \"C\") {\n              btn.classList.add(\"temperature-btn--left-active\");\n\n              // main temp\n              temp.innerHTML = `${Math.round(((temp.innerHTML - 32) * 5) / 9)}`;\n\n              // min temp\n              minTemp.innerHTML = `${Math.round(\n                ((minTemp.innerHTML - 32) * 5) / 9\n              )}`;\n\n              // max temp\n              maxTemp.innerHTML = `${Math.round(\n                ((maxTemp.innerHTML - 32) * 5) / 9\n              )}`;\n\n              // hourly temp\n              temps.forEach((temp) => {\n                temp.innerHTML = `${Math.round(\n                  ((temp.innerHTML - 32) * 5) / 9\n                )}`;\n              });\n            } else {\n              btn.classList.add(\"temperature-btn--right-active\");\n\n              // main temp\n              temp.innerHTML = `${Math.round((temp.innerHTML * 9) / 5 + 32)}`;\n\n              // min temp\n              minTemp.innerHTML = `${Math.round(\n                (minTemp.innerHTML * 9) / 5 + 32\n              )}`;\n\n              // max temp\n              maxTemp.innerHTML = `${Math.round(\n                (maxTemp.innerHTML * 9) / 5 + 32\n              )}`;\n\n              // hourly temp\n              temps.forEach((temp) => {\n                temp.innerHTML = `${Math.round((temp.innerHTML * 9) / 5 + 32)}`;\n              });\n            }\n          });\n          // if (tempBtnText.innerHTML === \"C\") {\n          //   tempBtnText.innerHTML = \"F\";\n          // temp.innerHTML = `${Math.round((temp.innerHTML * 9) / 5 + 32)}&deg;F`;\n          // } else {\n          //   tempBtnText.innerHTML = \"C\";\n          // temp.innerHTML = `${Math.round(((temp.innerHTML - 32) * 5) / 9)}&deg;C`;\n          // }\n        });\n      };\n      toggleTemp();\n    });\n  }\n});\n"]}