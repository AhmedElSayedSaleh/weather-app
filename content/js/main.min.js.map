{"version":3,"sources":["jquery.libraries.call.js","main.js"],"names":["$","document","ready","_$$owlCarousel2","owlCarousel","_defineProperty","_$$owlCarousel","loop","nav","dots","0","items","600","1000","addEventListener","querySelector","innerHTML","Date","toLocaleDateString","weekday","month","day","year","url","_getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","wrap","_context","prev","next","fetch","response","sent","json","abrupt","t0","console","log","stop","apply","this","arguments","getData","then","temp","minTemp","maxTemp","currently","daily","hourly","temperature","summary","icon","hourlyData","dailyData","allTemp","concat","Math","round","src","createTempDiv","time","dataLen","weatherContainer","createElement","timeEl","classList","add","length","getHours","toLocaleTimeString","hour","minute","hour12","iconEl","tempDiv","tempEl","tempDeg","appendChild","tempBtn","forEach","push","refresh","min","max","temperatureLow","querySelectorAll","btn","temps","remove","firstElementChild"],"mappings":"6/NAEAA,EAAAC,UAAAC,MAAA,WAAA,IAAAC,EACAH,EAAA,WAAAI,aAAAC,gBAAAC,EAAA,CACAC,MAAA,EACAC,KAAA,EACAC,MAAA,GAHA,QAIA,GAJAJ,gBAAAC,EAAA,aAKA,CACAI,EAAA,CACAC,MAAA,GAEAC,IAAA,CACAD,MAAA,GAEAE,IAAA,CACAF,MAAA,KAbAL,IAkBAN,EAAA,UAAAI,aAAAC,gBAAAF,EAAA,CACAI,MAAA,EACAC,KAAA,EACAC,MAAA,GAHA,QAIA,GAJAJ,gBAAAF,EAAA,aAKA,CACAO,EAAA,CACAC,MAAA,GAEAC,IAAA,CACAD,MAAA,GAEAE,IAAA,CACAF,MAAA,KAbAR,MCrBAF,SAAAa,iBAAA,mBAAA,WAaAb,SAAAc,cAAA,SACAC,WAXA,IAAAC,MAAAC,mBAAA,QAAA,CACAC,QAAA,OACAC,MAAA,QACAC,IAAA,UACAC,KAAA,YALA,IAiBAC,EACA,wFApBA,SAAAC,IAAA,OAAAA,EAAAC,kBAAAC,sBAAAC,KAsBA,SAAAC,IAAA,IAAAC,EAAA,OAAAH,sBAAAI,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEAC,MAAAX,GAFA,KAAA,EAAA,OAEAY,EAFAJ,EAAAK,KAAAL,EAAAE,KAAA,EAGAE,EAAAE,OAHA,KAAA,EAAA,OAGAR,EAHAE,EAAAK,KAAAL,EAAAO,OAAA,SAIAT,GAJA,KAAA,GAAAE,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,MAAA,GAMAS,QAAAC,IAAAV,EAAAQ,IANA,KAAA,GAAA,IAAA,MAAA,OAAAR,EAAAW,SAAAd,EAAA,KAAA,CAAA,CAAA,EAAA,UAtBAe,MAAAC,KAAAC,YAAA,WAAA,OAAArB,EAAAmB,MAAAC,KAAAC,WAiCAC,GAAAC,KAAA,SAAAlB,GACA,IAAAmB,EAAA/C,SAAAc,cAAA,SACAkC,EAAAhD,SAAAc,cAAA,aACAmC,EAAAjD,SAAAc,cAAA,aAEAoC,EAAAtB,EAAAsB,UAAAC,EAAAvB,EAAAuB,MAAAC,EAAAxB,EAAAwB,OACAC,EAAAH,EAAAG,YAAAC,EAAAJ,EAAAI,QAAAC,EAAAL,EAAAK,KACAC,EAAAJ,EAAAxB,KACA6B,EAAAN,EAAAvB,KAIA8B,EAAA,GACAX,EAAAhC,UAAA,GAAA4C,OAAAC,KAAAC,MAAAR,IAaArD,SAAAc,cAAA,SACAgD,IAAA,4CAAAH,OAAAJ,EAAA,QAGAvD,SAAAc,cAAA,YACAC,UAAAuC,EAMA,SAAAS,EAAAC,EAAAT,EAAAF,EAAAY,GACA,IAAAC,EAAAlE,SAAAmE,cAAA,OASAC,GARAF,EAAAG,UAAAC,IACA,OACA,SACA,cACA,sBAIAtE,SAAAmE,cAAA,MA2CA,OA1CAC,EAAAC,UAAAC,IAAA,4BAEA,EAAAL,EAAAM,OACA,IAAAvD,KAAA,IAAAgD,GAAAQ,cAAA,IAAAxD,MAAAwD,WACAJ,EAAArD,UAAA,MAEAqD,EAAArD,UAAA,IAAAC,KAAA,IAAAgD,GAAAS,mBAAA,QAAA,CACAC,KAAA,UACAC,OAAA,UACAC,QAAA,IAIAR,EAAArD,UAAA,IAAAC,KAAA,IAAAgD,GAAA/C,mBAAA,QAAA,CACAC,QAAA,WAMA2D,EADA7E,SAAAmE,cAAA,QACAE,UAAAC,IAAA,2BACAO,EAAAf,IAAA,4CAAAH,OAAAJ,EAAA,SAIAuB,EADA9E,SAAAmE,cAAA,QACAE,UAAAC,IAAA,oCAGAS,EADA/E,SAAAmE,cAAA,SACAE,UAAAC,IAAA,0CACAS,EAAAhE,UAAA,GAAA4C,OAAAC,KAAAC,MAAAR,KAGA2B,EADAhF,SAAAmE,cAAA,SACAE,UAAAC,IAAA,sBACAU,EAAAjE,UAAA,SAEA+D,EAAAG,YAAAF,GACAD,EAAAG,YAAAD,GAEAd,EAAAe,YAAAb,GACAF,EAAAe,YAAAJ,GACAX,EAAAe,YAAAH,GAEAZ,EAzFA,IAiIAgB,EAjGAlF,SAAAc,cAAA,mBACAC,UAAAqC,EAAAE,QA4DAE,EAAA2B,QAAA,SAAAT,GACA,IAAAR,EAAAH,EACAW,EAAAV,KACAU,EAAAnB,KACAmB,EAAArB,YACAG,GAEAE,EAAA0B,KAAAV,EAAArB,aAGAtD,EAAA,WAAAI,cACAJ,EAAA,WAAA6B,KAAA,gBAAA0C,IAAA,CAAAJ,EAAA,IACAnE,EAAA,WAAA6B,KAAA,gBAAAyD,YAzFArC,EAAAjC,UAAA,GAAA4C,OAAAC,KAAAC,MAAAD,KAAA0B,IAAA5C,MAAAkB,KAAAF,KAKAT,EAAAlC,UAAA,GAAA4C,OAAAC,KAAAC,MAAAD,KAAA2B,IAAA7C,MAAAkB,KAAAF,KA4FAD,EAAA0B,QAAA,SAAA/D,GACA8C,EAAAH,EACA3C,EAAA4C,KACA5C,EAAAmC,KACAnC,EAAAoE,eACA/B,GAIA1D,EAAA,UAAAI,cACAJ,EAAA,UAAA6B,KAAA,gBAAA0C,IAAA,CAAAJ,EAAA,IACAnE,EAAA,UAAA6B,KAAA,gBAAAyD,aAKAH,EAAAlF,SAAAyF,iBAAA,qBAEAN,QAAA,SAAAO,GACAA,EAAA7E,iBAAA,QAAA,WACA,IAAA8E,EAAA3F,SAAAyF,iBACA,2CAGAP,EAAAC,QAAA,SAAAO,GACAA,EAAArB,UAAAuB,OAAA,iCACAF,EAAArB,UAAAuB,OAAA,kCAEA,MAAAF,EAAAG,kBAAA9E,WACA2E,EAAArB,UAAAC,IAAA,gCAGAvB,EAAAhC,UAAA,GAAA4C,OAAAC,KAAAC,MAAA,GAAAd,EAAAhC,UAAA,IAAA,IAGAiC,EAAAjC,UAAA,GAAA4C,OAAAC,KAAAC,MACA,GAAAb,EAAAjC,UAAA,IAAA,IAIAkC,EAAAlC,UAAA,GAAA4C,OAAAC,KAAAC,MACA,GAAAZ,EAAAlC,UAAA,IAAA,IAIA4E,EAAAR,QAAA,SAAApC,GACAA,EAAAhC,UAAA,GAAA4C,OAAAC,KAAAC,MAAA,GAAAd,EAAAhC,UAAA,IAAA,QAGA2E,EAAArB,UAAAC,IAAA,iCAGAvB,EAAAhC,UAAA,GAAA4C,OAAAC,KAAAC,MAAA,EAAAd,EAAAhC,UAAA,EAAA,KAGAiC,EAAAjC,UAAA,GAAA4C,OAAAC,KAAAC,MACA,EAAAb,EAAAjC,UAAA,EAAA,KAIAkC,EAAAlC,UAAA,GAAA4C,OAAAC,KAAAC,MACA,EAAAZ,EAAAlC,UAAA,EAAA,KAIA4E,EAAAR,QAAA,SAAApC,GACAA,EAAAhC,UAAA,GAAA4C,OAAAC,KAAAC,MAAA,EAAAd,EAAAhC,UAAA,EAAA","file":"main.min.js","sourcesContent":["// ################# forecasts times & dates scroll ###################\n\n$(document).ready(function () {\n  $(\"#hourly\").owlCarousel({\n    loop: true,\n    nav: false,\n    dots: true,\n    loop: false,\n    responsive: {\n      0: {\n        items: 2,\n      },\n      600: {\n        items: 6,\n      },\n      1000: {\n        items: 9,\n      },\n    },\n  });\n\n  $(\"#daily\").owlCarousel({\n    loop: true,\n    nav: false,\n    dots: true,\n    loop: false,\n    responsive: {\n      0: {\n        items: 1,\n      },\n      600: {\n        items: 5,\n      },\n      1000: {\n        items: 8,\n      },\n    },\n  });\n});\n","document.addEventListener(\"DOMContentLoaded\", () => {\n  // get current date\n  const getDate = () => {\n    const date = new Date().toLocaleDateString(\"en-US\", {\n      weekday: \"long\",\n      month: \"short\",\n      day: \"numeric\",\n      year: \"numeric\",\n    });\n    return date;\n  };\n  // display date in html\n  const setDate = () => {\n    const date = document.querySelector(\"#date\");\n    date.innerHTML = getDate();\n  };\n  setDate();\n\n  // Get weather from api\n  const url =\n    \"https://api.darksky.net/forecast/a177f8481c31fa96c3f95ad4f4f84610/30.007414,31.491318\";\n\n  async function getData() {\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      return data;\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  // display weather in html\n  getData().then((data) => {\n    const temp = document.querySelector(\"#temp\");\n    const minTemp = document.querySelector(\"#min-temp\");\n    const maxTemp = document.querySelector(\"#max-temp\");\n\n    const { currently, daily, hourly } = data;\n    const { temperature, summary, icon } = currently;\n    const { data: hourlyData } = hourly;\n    const { data: dailyData } = daily;\n\n    // display current weather temperature\n\n    const allTemp = [];\n    temp.innerHTML = `${Math.round(temperature)}`;\n\n    // display min temperature\n    const getMinTemp = () => {\n      minTemp.innerHTML = `${Math.round(Math.min(...allTemp))}`;\n    };\n\n    // display max temperature\n    const getMaxTemp = () => {\n      maxTemp.innerHTML = `${Math.round(Math.max(...allTemp))}`;\n    };\n\n    // display current weather icon\n    const iconImg = document.querySelector(\"#icon\");\n    iconImg.src = `https://darksky.net/images/weather-icons/${icon}.png`;\n\n    // display current weather summary\n    const summaryEl = document.querySelector(\"#summary\");\n    summaryEl.innerHTML = summary;\n\n    const hourlySummary = document.querySelector(\"#hourly-summary\");\n    hourlySummary.innerHTML = hourly.summary;\n\n    // create html temp div\n    const createTempDiv = (time, icon, temperature, dataLen) => {\n      const weatherContainer = document.createElement(\"div\");\n      weatherContainer.classList.add(\n        \"item\",\n        \"d-flex\",\n        \"flex-column\",\n        \"align-items-center\"\n      );\n\n      // create weather time\n      const timeEl = document.createElement(\"p\");\n      timeEl.classList.add(\"weather__forecasts__time\");\n\n      if (dataLen.length > 8) {\n        if (new Date(time * 1000).getHours() === new Date().getHours()) {\n          timeEl.innerHTML = \"Now\";\n        } else {\n          timeEl.innerHTML = new Date(time * 1000).toLocaleTimeString(\"en-US\", {\n            hour: \"numeric\",\n            minute: \"numeric\",\n            hour12: false,\n          });\n        }\n      } else {\n        timeEl.innerHTML = new Date(time * 1000).toLocaleDateString(\"en-US\", {\n          weekday: \"short\",\n        });\n      }\n\n      // create weather icon\n      const iconEl = document.createElement(\"img\");\n      iconEl.classList.add(\"weather__forecasts__img\");\n      iconEl.src = `https://darksky.net/images/weather-icons/${icon}.png`;\n\n      // create weather temp\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.classList.add(\"weather__forecasts__temperature\");\n\n      const tempEl = document.createElement(\"span\");\n      tempEl.classList.add(\"weather__forecasts__temperature__value\");\n      tempEl.innerHTML = `${Math.round(temperature)}`;\n\n      const tempDeg = document.createElement(\"span\");\n      tempDeg.classList.add(\"temperature-degree\");\n      tempDeg.innerHTML = \"&#176;\";\n\n      tempDiv.appendChild(tempEl);\n      tempDiv.appendChild(tempDeg);\n\n      weatherContainer.appendChild(timeEl);\n      weatherContainer.appendChild(iconEl);\n      weatherContainer.appendChild(tempDiv);\n\n      return weatherContainer;\n    };\n\n    // display hourly weather\n    hourlyData.forEach((hour) => {\n      const weatherContainer = createTempDiv(\n        hour.time,\n        hour.icon,\n        hour.temperature,\n        hourlyData\n      );\n      allTemp.push(hour.temperature);\n\n      // append hourly weather to html by owl carousel\n      $(\"#hourly\").owlCarousel();\n      $(\"#hourly\").data(\"owl.carousel\").add([weatherContainer, 0]);\n      $(\"#hourly\").data(\"owl.carousel\").refresh();\n    });\n\n    // min & max temperature calling methods\n    getMinTemp();\n    getMaxTemp();\n\n    // display daily weather\n    dailyData.forEach((day) => {\n      const weatherContainer = createTempDiv(\n        day.time,\n        day.icon,\n        day.temperatureLow,\n        dailyData\n      );\n\n      // append daily weather to html by owl carousel\n      $(\"#daily\").owlCarousel();\n      $(\"#daily\").data(\"owl.carousel\").add([weatherContainer, 0]);\n      $(\"#daily\").data(\"owl.carousel\").refresh();\n    });\n\n    // Celsius/Fahrenheit buttons toggle\n    const toggleTemp = () => {\n      const tempBtn = document.querySelectorAll(\".temperature-btn\");\n\n      tempBtn.forEach((btn) => {\n        btn.addEventListener(\"click\", () => {\n          const temps = document.querySelectorAll(\n            \".weather__forecasts__temperature__value\"\n          );\n\n          tempBtn.forEach((btn) => {\n            btn.classList.remove(\"temperature-btn--right-active\");\n            btn.classList.remove(\"temperature-btn--left-active\");\n          });\n          if (btn.firstElementChild.innerHTML === \"C\") {\n            btn.classList.add(\"temperature-btn--left-active\");\n\n            // main temp\n            temp.innerHTML = `${Math.round(((temp.innerHTML - 32) * 5) / 9)}`;\n\n            // min temp\n            minTemp.innerHTML = `${Math.round(\n              ((minTemp.innerHTML - 32) * 5) / 9\n            )}`;\n\n            // max temp\n            maxTemp.innerHTML = `${Math.round(\n              ((maxTemp.innerHTML - 32) * 5) / 9\n            )}`;\n\n            // hourly temp\n            temps.forEach((temp) => {\n              temp.innerHTML = `${Math.round(((temp.innerHTML - 32) * 5) / 9)}`;\n            });\n          } else {\n            btn.classList.add(\"temperature-btn--right-active\");\n\n            // main temp\n            temp.innerHTML = `${Math.round((temp.innerHTML * 9) / 5 + 32)}`;\n\n            // min temp\n            minTemp.innerHTML = `${Math.round(\n              (minTemp.innerHTML * 9) / 5 + 32\n            )}`;\n\n            // max temp\n            maxTemp.innerHTML = `${Math.round(\n              (maxTemp.innerHTML * 9) / 5 + 32\n            )}`;\n\n            // hourly temp\n            temps.forEach((temp) => {\n              temp.innerHTML = `${Math.round((temp.innerHTML * 9) / 5 + 32)}`;\n            });\n          }\n        });\n        // if (tempBtnText.innerHTML === \"C\") {\n        //   tempBtnText.innerHTML = \"F\";\n        // temp.innerHTML = `${Math.round((temp.innerHTML * 9) / 5 + 32)}&deg;F`;\n        // } else {\n        //   tempBtnText.innerHTML = \"C\";\n        // temp.innerHTML = `${Math.round(((temp.innerHTML - 32) * 5) / 9)}&deg;C`;\n        // }\n      });\n    };\n    toggleTemp();\n  });\n});\n"]}